@import "../variables";

main {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: 100%;
  gap: 25%;
  overflow-y: scroll;
  width: 100%;
  scroll-snap-type: inline mandatory;

  @media screen and (min-width: $breakpoint) {
    overscroll-behavior: contain;
    background-color: #dddddd;
    max-width: 66.67%;
    margin-left: 33.33%;
    gap: 3rem;
    padding-right: 16.5vw;
    // This is because of the sass compile being stupid and not letting me use
    // both percentage and px in the min function.
    grid-auto-columns: unquote("min(100%, 500px)");

    &:before {
      content: "";
      width: 100%;
    }
  }

  .arrows {
    z-index: 1;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    left: 0;
    width: 100vw;

    .arrow {
      --border: 3px solid var(--title-color-75);
      --border-null: 3px solid var(--title-color-25);
      --border-hover: 3px solid var(--title-color);
      --arrows: 6px solid var(--title-color-75);
      --arrows-null: 6px solid var(--title-color-25);
      --arrows-hover: 6px solid var(--title-color);
      position: absolute;
      height: 50px;
      width: 50px;
      transform: rotate(45deg);
      border-radius: 50%;
      border: var(--border);
      transition: all var(--transition-speed) var(--transition-style);
      background-color: var(--background-color);
      cursor: pointer;

      &:after {
        content: "";
        position: absolute;
        height: 20px;
        width: 20px;
        border-left: var(--arrows);
        border-bottom: var(--arrows);
        top: 25%;
        right: 25%;
        border-radius: 5px;
        transition: all var(--transition-speed) var(--transition-style);
        transition-delay: 50ms;
      }

      &.left {
        left: 16px;

        &:not(.inactive):hover {
          transform: rotate(45deg) translate(-2px, 2px);
          border: var(--border-hover);
          &:after {
            border-left: var(--arrows-hover);
            border-bottom: var(--arrows-hover);
            transform: translate(-1px, 1px);
          }
        }
      }
      &.right {
        right: 16px;

        &:after {
          transform: scale(-1);
          top: 32%;
          right: 32%;
        }

        &:not(.inactive):hover {
          transform: rotate(45deg) translate(2px, -2px);
          border: var(--border-hover);
          &:after {
            border-left: var(--arrows-hover);
            border-bottom: var(--arrows-hover);
            transform: scale(-1) translate(-1px, 1px);
          }
        }
      }

      &.inactive {
        border: var(--border-null);
        &:after {
          border-left: var(--arrows-null);
          border-bottom: var(--arrows-null);
        }
      }
    }

    @media screen and (min-width: 769px) {
      left: 33vw;
      width: 67vw;

      .arrow {
        &.left {
          left: 5%;
        }
        &.right {
          right: 5%;
        }
      }
    }
  }

  .col {
    scroll-snap-align: start;
    height: 100vh;
    overflow-y: scroll;
    width: 100%;
    max-width: 100%;

    @media screen and (min-width: $breakpoint) {
      scroll-snap-align: center;
      width: 500px;
    }
  }

  .row.has-image {
    width: 100%;

    &:after {
      content: "";
      display: block;
      padding-bottom: 100%;
    }
  }

  .row.has-image > img {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .row + .row {
    margin-top: 12px;
  }

  .row:first-child {
    margin-top: 7.25rem;

    @media screen and (min-width: $breakpoint) {
      margin-top: 0;
      top: 50%;
      transform: translateY(-50%);
    }
  }

  .row:last-child {
    margin-bottom: 3rem;

    @media screen and (min-width: $breakpoint) {
      transition: all var(--transition-speed) var(--transition-style);
      clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);
      opacity: 0;
      position: fixed;
      left: 0;
      width: 33.33%;
      padding-inline: 1rem;
      top: calc(33.33% + 2rem);

      &.active {
        transition-delay: var(--transition-speed);
        opacity: 1;
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
      }

      h2,
      h3 {
        font-size: clamp(2.25rem, 3vw, 3.5rem);
        line-height: clamp(2.25rem, 3vw, 3.5rem);
      }
    }
  }
}
